# This is a syncronisation workflow to that pulls the latest documentation from the lammps repository
# and builds an updated vsix-package based on these files.

name: SYNC

on:
  schedule:
    - cron: '45 11 16 * *'
  workflow_dispatch:
    
jobs:
  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2 
    - uses: actions/setup-node@v1
    - name: Cache node modules
      uses: actions/cache@v2
      env:
        cache-name: cache-node-modules
      with:
        path: ~/.npm
        key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.os }}-build-${{ env.cache-name }}-
          ${{ runner.os }}-build-
          ${{ runner.os }}-
          
    - name: Download updated Docs
      run:
        svn export https://github.com/lammps/lammps/branches/release/doc/src rst --force

    - name: Build Docs TS-Object
      run: |
        python3 -m pip install --upgrade pip
        pip3 install numpy
        python3 ./rst2json/rst2JSON.py

    - name: Build package
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
      run: |
        apt install imagemagick -sync
        bash ./scripts/resize256.sh
        npm install
        npm install -g vsce
        npm audit fix
        npm version patch
        vsce package

    - name: Push2Git
      if: ${{ success() }}
      run: |
        git config --global user.name 'thfriedrich'
        git config --global user.email 'thfriedrich@users.noreply.github.com'
        git config --global pull.ff only
        git add .
        # Check if Lammps Docs were updated
        if ! [[ $(git status) == *"nothing to commit, working tree clean"* ]]; then
          git commit -m "Scheduled sync of lammps_vscode with Lammps documentation $(date +'%Y-%m-%d')"
          git push
          echo "::set-env name=b_update::true" 
        else
          # Check if vscode-Lammps master branch had commits since last tag
          n_com=$(git rev-list $(git describe --tags --abbrev=0 @^)..master --count)
          if [ "$n_com" -gt "0" ];then
            echo "b_update=true" >> $GITHUB_ENV
          fi
        fi
              
    - name: Get Tag and Date
      if: env.b_update == 'true' && ${{ success() }}
      id: date_tag
      run: | 
        echo "::set-output name=date::$(date +'%Y-%m-%d')"
        echo "::set-output name=vsix_file::$(find *.vsix)"
        echo "::set-output name=tag::$(find *.vsix | cut -d'.' -f1-3 | cut -d'-' -f2-3)"
        echo "::set-output name=lmp_version::$(curl --silent "https://api.github.com/repos/lammps/lammps/releases/latest" | grep -Po '"tag_name": "\K.*?(?=")')"
    
    - name: Create Release
      if: env.b_update == 'true' && ${{ success() }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.date_tag.outputs.tag }}-sync${{ steps.date_tag.outputs.date }}
        release_name: v${{ steps.date_tag.outputs.tag }} Sync Release - ${{ steps.date_tag.outputs.date }}
        body: Scheduled synchronisation of lammps_vscode with Lammps documentation from ${{ steps.date_tag.outputs.date }}. This version corresponds to lammps release ${{ steps.date_tag.outputs.lmp_version }}.
        draft: false
        prerelease: false   
          
    - name: Publish2GitHub
      if: env.b_update == 'true' && ${{ success() }}
      uses: skx/github-action-publish-binaries@master
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        releaseId: ${{ steps.create_release.outputs.id }} 
        args: ${{ steps.date_tag.outputs.vsix_file }}

    - name: Publish2Marketplace
      if: env.b_update == 'true' && ${{ success() }}
      run: vsce publish
      env:
        VSCE_PAT: ${{ secrets.VSCE_PAT }}
        
        
